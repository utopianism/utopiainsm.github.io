<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-01-04T16:27:00+08:00</updated><id>/</id><title type="html">gogo’s blog</title><subtitle></subtitle><entry><title type="html">Config React Native At Atom And Webstorm</title><link href="/2018/01/02/config-react-native-at-Atom-and-WebStorm.html" rel="alternate" type="text/html" title="Config React Native At Atom And Webstorm" /><published>2018-01-02T00:00:00+08:00</published><updated>2018-01-02T00:00:00+08:00</updated><id>/2018/01/02/config-react-native-at-Atom-and-WebStorm</id><content type="html" xml:base="/2018/01/02/config-react-native-at-Atom-and-WebStorm.html">&lt;h1 id=&quot;如何在-atom-和-webstorm-上配置-react-native-的代码编辑环境&quot;&gt;如何在 Atom 和 WebStorm 上配置 React Native 的代码编辑环境&lt;/h1&gt;

&lt;p&gt;针对 React Native 的项目，这里主要介绍什么是 Eslint 和 Flow ，以及在 Atom 和 WebStorm 上如何配置它们。&lt;/p&gt;

&lt;h2 id=&quot;eslint&quot;&gt;Eslint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://eslint.org/&quot;&gt;Eslint&lt;/a&gt; 作为静态代码检查工具，在团队代码中可以起到统一代码风格的作用，同时会适当降低代码编写过程中出现的一些非必要性错误。&lt;/p&gt;

&lt;p&gt;ESLint 官方网站上的介绍：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调适。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ESLint 的初衷是为了让程序员可以创建自己的检测规则。ESLint 的所有规则都被设计成可插入的。ESLint 的默认规则与其他的插件并没有什么区别，规则本身和测试可以依赖于同样的模式。为了便于人们使用，ESLint 内置了一些规则，当然，你可以在使用过程中自定义规则。
&lt;a href=&quot;http://eslint.cn/docs/about&quot;&gt;http://eslint.cn/docs/about/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于 ESLint 的灵活可配置，我们这里采用的是 airbnb 的 ESLint 规范并添加自己的配置，在当前 React Native 项目下打开终端，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add -D&lt;/code&gt; 安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-eslint eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react&lt;/code&gt; 这些依赖库。&lt;/p&gt;

&lt;p&gt;在当前项目路径下创建 .eslintrc 文件，并编辑规则配置：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;extends&quot;: &quot;airbnb&quot;,
  &quot;rules&quot;: {
    &quot;react/jsx-filename-extension&quot;: [1, { &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] }],
    &quot;no-underscore-dangle&quot;: [&quot;error&quot;, { &quot;allowAfterThis&quot;: true }],
    &quot;no-use-before-define&quot;: 0,
    &quot;react/prop-types&quot;: 0,
    &quot;react/require-default-props&quot;: 0,
    &quot;import/prefer-default-export&quot;: 0,
    &quot;arrow-body-style&quot;: 0,
    &quot;react/prefer-stateless-function&quot;: 0,
    &quot;class-methods-use-this&quot;: 0,
    &quot;global-require&quot;: 0,
    &quot;no-bitwise&quot;: 0,
    &quot;guard-for-in&quot;: 0,
    &quot;no-param-reassign&quot;: 0,
    &quot;no-restricted-syntax&quot;: 0,
    &quot;react/jsx-boolean-value&quot;: 0,
    &quot;no-undef&quot;: 0,
    &quot;no-console&quot;: 0,
    &quot;react/sort-comp&quot;: [1, {order: [
                  'type-annotations',
                  'static-methods',
                  'lifecycle',
                  'everything-else',
                  'render',
                  ],
                  }],
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;eslint-在-atom-上的配置&quot;&gt;Eslint 在 Atom 上的配置&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;在 Atom 上打开 settings,  在 Install 中搜索并安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;linter-eslint &lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;验证 eslint 规则是否生效。在项目路径下新建或打开一个 js 文件，输入：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
  const bar = 1;
  bar = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Atom 会提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo' is defined but never used.&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo' is defined but never used.&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'aNum' is constant. &lt;/code&gt; 这几个错误，因为这里的 ESLint 规定定义的方法或者变量一定要在项目里被使用，否则报错；constant 定义之后不能更改它的值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Atom 可以设置成保存时修复简单的 ESLint 错误。类似空格，空行如果不按规则，保存时会自动修复，这个功能非常实用。在 Settings -&amp;gt; Install -&amp;gt; Linter Eslint 上将 Fix erros on save 打开就行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;eslint-在-webstorm-上的配置&quot;&gt;Eslint 在 WebStorm 上的配置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;WebStorm 打开项目后，在 Preferences -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; JavaScript -&amp;gt; Code quality tools -&amp;gt; ESLint 上将 Enable 勾上，指定 Eslint package 为当前项目路径下的 node_modules/eslint 。&lt;/li&gt;
  &lt;li&gt;验证 eslint 规则是否生效。在项目路径下新建或打开一个 js 文件，输入：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
  const bar = 1;
  bar = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;WebStorm 不能在保存时修复一些简单的规则错误（如果你知道怎么实现，请告诉我），但是可以通过设定快捷键运行 eslint 的自动修复。打开 Preferences -&amp;gt; Tools -&amp;gt; External tools，点击 + 按钮新建一个新的外部工具，命名为 ESLint Fix，按照下图配置此工具的参数：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/eslint-fix-config-at-webstorm.png&quot; alt=&quot;eslint-fix-config-at-webstorm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置完后，可以给 ESLint Fix 设置个快捷键，通过快捷键也可以实现类似 Atom 的自动修复功能：
&lt;img src=&quot;/assets/eslint-fix-keymap-setting.png&quot; alt=&quot;flow-config-at-webstorm&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;flow&quot;&gt;Flow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; 是 Facebook 推出的一个静态类型检查工具，可以在编写代码的时候对代码进行类型核对检查，减少 bug 的出现。&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add -D&lt;/code&gt; 安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;flow-bin&lt;/code&gt;，为了确保 Flow 的服务能正常启动运行，必现保证项目里面 package.json 里的 flow-bin 版本和项目路径下 .flowconfig 文件里面的配置版本统一。&lt;/p&gt;

&lt;p&gt;例如在 React Native 0.50.4 的版本中 .flowconfig 里面的版本信息是 ^0.56.0，则安装 flow-bin 指定版本安装： &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add -D flow-bin@0.56.0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在任意 js 文件中，只要头部注释包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;@flow&lt;/code&gt; ， Flow 的服务便会对当前文件进行类型检查，并且在 Atom 的底部状态栏会更新 Flow 的覆盖率。如果有类型错误，Flow 会像 Eslint 那样有报错提示。&lt;/p&gt;

&lt;h3 id=&quot;flow-在-atom-上的配置&quot;&gt;Flow 在 Atom 上的配置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;在 Atom 上安装 &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; 开发工具， 打开 settings,  在 Install 中搜索并安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;Nuclide&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;建议重启下 Atom&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;flow-在-webstorm-上的配置&quot;&gt;Flow 在 WebStorm 上的配置&lt;/h3&gt;

&lt;p&gt;WebStorm 打开项目后，在 Preferences -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; JavaScript 上按下面截图配置：&lt;img src=&quot;/assets/flow-config-at-webstorm.png&quot; alt=&quot;flow-config-at-webstorm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外关于 Flow 在 React Native 项目上的一些细节实践将在另一篇文章介绍。&lt;/p&gt;

&lt;p&gt;End.&lt;/p&gt;</content><author><name></name></author><summary type="html">如何在 Atom 和 WebStorm 上配置 React Native 的代码编辑环境</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2017/01/07/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-01-07T22:14:26+08:00</published><updated>2017-01-07T22:14:26+08:00</updated><id>/jekyll/update/2017/01/07/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2017/01/07/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>